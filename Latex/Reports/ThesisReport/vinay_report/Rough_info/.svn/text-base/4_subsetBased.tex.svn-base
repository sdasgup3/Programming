EXAMPLE 1:
Consider the code segment in the Fig:~\ref{fig:Code}(a) which has the code  for searching data in a binary tree  and  Fig:~\ref{fig:Code}(b) ,a small code snippet of the
insert function.The datstructure of they binary tree node is also shown.The code snippet of insert is just a small set of statements that are of inserting 
a node into a binary tree. 
  In the table the value of boolean varaibles  $\LEFT_{p,t}$ ,$\PARENT_{t,p}$ are shown after each statement.(The statements S0,S6 were not considered at all
as they donot effect the shape of pointer in any way).The value of $\LEFT_{p,t}$ has become TRUE after statement S4 and value of  $\PARENT_{t,p}$ after S5.
The direction and interference matrices after each statement is also shown in Fig:~\ref{fig:Code}(c).

    In that the pointer parent is used mainly for debugging.As you can notice the parent pointer is not at all used in
the function search.During the build of the binary tree each child's parent pointer is made to point to its parent making shape of
every node in the tree a cycle.But when you see the function search, parent pointer is not used at all.Though the search($\s\rightarrow\LEFT$,key)
and search($\s\rightarrow\RIGHT$,key) functions can be executed in parallel ,its inhibited because the shape at pointer s is identified as a cycle.
If we could identify the field pointers not used in the function and try to find the shape excluding that field pointer we can get
precise shapes. Fig:~\ref{fig:Code}(d) gives the values of boolean equations at the end of statement S5.To each entry we find S4 or S5 appended to the curly brackets just
to tell that those values are to be taken from that equations data flow output values.

One way to find the shape without considering PARENT field for the function search is to  do the following, make  $\forall x,y    PARENT_ {x,y}=0 $
and then substitute the datflow values in the boolean equation.


%\begin{comment}

\begin{figure}
\centering
\scalebox{0.80}{
\begin{tabular}{@{}c@{}}
\begin{tabular}{@{}cc@{}}
  {\small \tt
    \begin{tabular}[b]{l}
      Struct Node \{ \\
             Struct Node *LEFT,*RIGHT,*PARENT;\\
             int key;\\  
      \}  \\
      \\
      bool search(node *s,int key) \{  \\
      if(s)  \\
      return (key==s->data)||search(s->LEFT,key)||search(s->RIGHT,key); \\
      return 0; \\
      \}
    \end{tabular}
  } &
   {\small \tt
    \begin{tabular}[b]{l}
      insert(node *s,int key) \{ \\
             .\\
	     .\\
      S0     Node *p;\\       
      S1.    p=malloc(sizeof(struct Node)); \\
      S2.    p->LEFT=NULL; \\
      S3.    p->RIGHT=NULL; \\
      S4.    s->LEFT=p; \\
      S5.    p->PARENT = s; \\
      S6.    p->data=key;  \\  
             .\\
             .\\
      \}  
    \end{tabular}
  }\\
  \footnotesize (a) A code fragment  %& \footnotesize (b)  \\
  \end{tabular} \\  \\

  \scalebox{0.80}{
    \begin{tabular}[b]{|c||c|c|}
          \hline 
          {\bf After} & $\LEFT_{p,t}$ & $\PARENT_{t,p}$ \\ 
           \hline \hline
	  {\tt S1}       & false	  & false     \\ \hline
	  {\tt S2}       & false          & false     \\ \hline
	  {\tt S3}       & false 	  & false     \\ \hline
	  {\tt S4}       & true	          & false     \\ \hline
          {\tt S5}       & true	          & true     \\ \hline
    \end{tabular} 
      
  } 
  \footnotesize (b) Boolean Variables  \\ \\
  

  \scalebox{0.80}{
\begin{tabular}[b]{|l@{}|@{}c@{}|@{}c@{}|} \hline
 {\bf After} & $D_F$ & $I_F$ \\ 
 {\bf Stmt} & & \\ \hline

{\tt S1} & 
\begin{tabular}{|p{3mm}|p{22mm}p{22mm}|} \hline 
            & $\p$  		& $\s$   \\ \hline
  $\p$ 	& $\epsilon$	& $\emptyset$	 \\ \hline
  $\s$ 	& $\emptyset$	& $\emptyset$	\\ \hline
\end{tabular}
 &
\begin{tabular}{|p{3mm}|p{40mm}p{40mm}|} \hline 
            & $\p$  		& $\s$   \\ \hline
  $\p$ 	& $\{(\epsilon,\epsilon)\}$	& $\emptyset$	 \\ \hline
  $\s$ 	& $\emptyset$	& $\emptyset$	\\ \hline
\end{tabular} \\ \hline

{\tt S2} & 
\begin{tabular}{|p{3mm}|p{22mm}p{22mm}|} \hline 
            & $\p$  		& $\s$   \\ \hline
  $\p$ 	& $\epsilon$	& $\emptyset$	 \\ \hline
  $\s$ 	& $\emptyset$	& $\emptyset$	\\ \hline
\end{tabular}
 &
\begin{tabular}{|p{3mm}|p{40mm}p{40mm}|} \hline 
            & $\p$  		& $\s$   \\ \hline
  $\p$ 	& $\{(\epsilon,\epsilon)\}$	& $\emptyset$	 \\ \hline
  $\s$ 	& $\emptyset$	& $\emptyset$	\\ \hline
\end{tabular} \\ \hline

{\tt S3} & 
\begin{tabular}{|p{3mm}|p{22mm}p{22mm}|} \hline 
            & $\p$  		& $\s$   \\ \hline
  $\p$ 	& $\epsilon$	& $\emptyset$	 \\ \hline
  $\s$ 	& $\emptyset$	& $\emptyset$	\\ \hline
\end{tabular}
 &
\begin{tabular}{|p{3mm}|p{40mm}p{40mm}|} \hline 
            & $\p$  		& $\s$   \\ \hline
  $\p$ 	& $\{(\epsilon,\epsilon)\}$	& $\emptyset$	 \\ \hline
  $\s$ 	& $\emptyset$	& $\emptyset$	\\ \hline
\end{tabular} \\ \hline

{\tt S4} & 
\begin{tabular}{|p{3mm}|p{22mm}p{22mm}|} \hline 
            & $\p$  		& $\s$   \\ \hline
  $\p$ 	& $\epsilon$	& $\emptyset$	 \\ \hline
  $\s$ 	& $\{\fieldD{left}{}\}$	& $\emptyset$	\\ \hline
\end{tabular}
 &
\begin{tabular}{|p{3mm}|p{40mm}p{40mm}|} \hline 
            & $\p$  		& $\s$   \\ \hline
  $\p$ 	& $\{(\epsilon,\epsilon)\}$	& $\{( \epsilon,\fieldD{left}{})\}$ 	 \\ \hline
  $\s$ 	& $\{(\fieldD{left}{}, \epsilon)\}$	& $\emptyset$	\\ \hline
\end{tabular} \\ \hline

{\tt S5} & 
\begin{tabular}{|p{3mm}|p{22mm}p{22mm}|} \hline 
            & $\p$  		& $\s$   \\ \hline
  $\p$ 	& $\epsilon$	& $\{\fieldD{parent}{}\}$	 \\ \hline
  $\s$ 	& $\{\fieldD{left}{}\}$	& $\emptyset$	\\ \hline
\end{tabular}
 &
\begin{tabular}{|p{3mm}|p{40mm}p{40mm}|} \hline 
            & $\p$  		& $\s$   \\ \hline
  $\p$ 	& $\{(\epsilon,\epsilon)\}$	&  $\{( \epsilon,\fieldD{left}{}),(\fieldD{parent}{},\epsilon)\}$	 \\ \hline
  $\s$ 	& $\{(\fieldD{left}{}, \epsilon),(\epsilon,\fieldD{left}{})\}$		& $\emptyset$	\\ \hline
\end{tabular} \\ \hline

\end{tabular} 

}  \\
 \footnotesize (c) Direction ($D_F$) and Interference ($I_F$) matrices  \\ \\
  
\scalebox{0.80}{
\begin{tabular}[b]{|c@{}|@{}c@{}|@{}p{180mm}|}\hline
  Heap Pointer & Shape & BooleanEquation \\ \hline
{\tt p} &
\begin{tabular}{c}
  dag \\ \hline
  cycle \\
\end{tabular}
&
\begin{tabular}{c}
 \{  ($\PARENT_{p,s}  \wedge  s_{cycle}^{in}$) $\vee$ ($\PARENT_{p,s} \wedge ( \num{D[s,p]} >= 1)$) \}S5 $\vee$    \{ $\LEFT_{s,p}  \vee ( \num{D[p,s]} >= 1)$ \}S4  \\ 
  \{ ($\PARENT_{p,s} \wedge   ( \num{I[p,s]} > 1)$) \}S5
\end{tabular}  \\ \hline
{\tt s}&
\begin{tabular}{c} \hline
  dag \\ \hline
  cycle \\
\end{tabular}
&
\begin{tabular}{c}
  \{ $\PARENT_{p,s} \wedge ( \num{D[s,p]} >= 1)$ \}S5 $\vee$ \{  ($\LEFT_{s,p}  \wedge  p_{cycle}^{in}$) $\vee$ ($\LEFT_{s,p} \wedge   ( \num{D[p,s]} >= 1)$) \}S4 \\  
  \{ ($\LEFT_{s,p} \wedge   ( \num{I[s,p]} > 1)$) \}S4
\end{tabular}  \\ \hline

\end{tabular}
} \\
\footnotesize (d) Boolean Equations at the end  \\
      
    

\end{tabular}}
%  \caption{ mirror image of a  binary tree. ``$l$'' and ``$r$'' denotes respectively the left and right fields of tree.\label{fig:limitation}}
\label{fig:Code}
\end{figure}
