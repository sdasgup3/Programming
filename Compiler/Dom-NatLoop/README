TO COMPILE
===========

gcc source/*.c

To Run
=============
./a.out <input filename>


*** ASSUMPTION ****
====================
If 'N' is the number of vertices of the graph, then the vertices MUST BE LABELLED FROM 1 to N, in any order.

INPUT
=======
The program takes input from a file, whose format is as follows:

<N>                /*The Number of Vertices Of Control Flow Graph*/
<Entry_Point>      /*An integer From 1 to N*/
<I> <J>            /*I and J are are two integers(from 1 - N) representing the edge I-J*/
<J> <K>            /*J and K are are two integers(from 1 - N) representing the edge J-K*/

SAMPLE INPUT AND OUTPUT
=======================
Please refer ./Test directory which contain 10 sample inputs on which the program is tested,
and the directory ./Gold contains the corresponding outputs. For example, the output of the input sample
./Test/test_1 is ./Gold/gold_1. 


OUTPUT
==========
The Output is dumped in a file "Output.Info".

Output Interpretation
=====================
The output file "Output.Info" has the following information:

1. The Dominator Tree
   ------------------
   Consider one such sample output,

			--------------------
			 The Dominator Tree
			--------------------

   1
      2
         4
         5
         7
            8
      3
         6
   
   The interpretation of the above tree is:
   2,3     : children of 1
   4,5,7   : children of 2
   6       : child of 3
   8       : child of 7

2.The Back Edge and the Natural Loop
  ----------------------------------
  Consider one such sample output, NOTE : The following output is NOT RELATED to the previous
                                          one. 

                -------------------------------------
		 Back Edge		Natural Loop
		-------------------------------------

		 7 --> 2		 [ 2 7 5 4 3 ]
		 6 --> 6		 [ 6 ]
		 6 --> 2		 [ 2 6 5 4 3 ]
		 4 --> 3		 [ 3 4 ]


3.The Back Edges that could be combined and the corresponding combined loops.
  -----------------------------------------------------------------------------
  Consider one such sample output, NOTE : The following output is RELATED to the previous 
                                          one.

	        'If Any Two BackEdges Have The Same 'Head', We Combine The Coresponding Loops'
		------------------------
		 Combined Natural Loops
		------------------------

		The Following BackEdges can be combined :

		 1 ) {7 --> 2} {6 --> 2} 
		 The Corresponding Merged Natural Loop : [2 3 4 5 6 7 ]

