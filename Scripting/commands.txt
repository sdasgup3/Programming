Adding printer(http://it.engineering.illinois.edu/user-guides/printing/siebel-center-printers-copiers-scanners-plotters)
==============
http://it.engineering.illinois.edu/user-guides/printing/siebel-center-printers-copiers-scanners-plotters

http://it.engineering.illinois.edu/sites/default/files/documents/xr_p5550.ppd

copy the ppd file to /etc/cups/ppd/xr_p5550.ppd (Example: /etc/cups/ppd/xr_p5550.ppd )
/usr/sbin/lpadmin -p xr_p5550 -P /etc/cups/ppd/xr_p5550.ppd -o printer-is-shared=false -o printer-error-policy=abort-job -o job-sheets-default=none -o sides=two-sided-long-edge -o wrap=true -o prettyprint=true -v lpd://engr-print-01.engr.illinois.edu/xr_p5550
/usr/sbin/accept xr_p5550
/usr/sbin/cupsenable xr_p5550

select Network printer --> Host : 172.22.11.41
folow the prmpts and provide the ppd file at the end.

Testing Coreutils====================export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib64 (Fedora)
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu (Ubuntu)
    
Step 1: Build coreutils with gcov
-----------------------------------
First you will need to download and unpack the source for coreutils. In this example we use version 6.11 (one version later than what was used for our OSDI paper).

mkdir obj-gcov
cd obj-gcov
../configure --disable-nls CFLAGS="-g -fprofile-arcs -ftest-coverage"
make
make -C src arch hostname

cd src
ls -l ls echo cat
./cat --version
rm -f *.gcda # Get rid of any stale gcov files
./echo
ls -l echo.gcda
gcov echo

Step 2: Build coreutils with LLVM
----------------------------------
mkdir obj-llvm
cd obj-llvm
../configure --disable-nls CFLAGS="-g"
make CC=/home/sdasgup3/KLEE/klee/scripts/klee-gcc
make -C src arch hostname CC=/home/sdasgup3/KLEE/klee/scripts/klee-gcc

cd src
ls -l ls echo cat
./cat --version

klee --libc=uclibc --posix-runtime ./cat.bc --version
klee --libc=uclibc --posix-runtime ./echo.bc --sym-arg 3
klee-stats klee-last
klee --optimize --libc=uclibc --posix-runtime ./echo.bc --sym-arg 3
klee-stats klee-last

klee --only-output-states-covering-new --optimize --libc=uclibc --posix-runtime ./echo.bc --sym-args 0 2 4
klee --only-output-states-covering-new --optimize --libc=uclibc --posix-runtime ./echo.bc --sym-args 0 2 4

klee --zest --use-symbex=2 --symbex-for=10 --search=zest --libc=uclibc --allow-external-sym-calls  --zest-search-heuristic=br  --zest-discard-far-states=false --use-query-log=all:pc  --use-query-log=solver:pc --check-div-zero=false



env -i /bin/bash -c '(source testing-env.sh; env >test.env)'

Linux Dist
=========
http://www.cyberciti.biz/faq/find-linux-distribution-name-version-number/

*******************************************************
*******************************************************
New Python
*******************************************************
*******************************************************
wget http://www.python.org/ftp/python/2.7.2/Python-2.7.2.tgz
tar xzf Python-2.7.2.tgz
cd python-2.7.2
./configure
It’s said that you need to type make command in the most of the posts on the
net but this will cause python will be compiled for ‘/usr/local‘ directory and
hence It will need root privileges to install itself into that directory.
However, We want to setup an installation for our home directory.

make altinstall prefix=~ exec-prefix=~ Note: ‘prefix=~‘ installs all
platform-independent files in ~/lib and ‘exec-prefix=~‘ installs all binary
and other platform-specific files in ~/bin
But I prefer to set my local app installations in ~/usr/local, so I had used
the command below to compile python.

make altinstall prefix=~/usr/local exec-prefix=~/usr/local

Additionally, altinstall parameter says python will be installed with another
installed python before. So you can have different copy of python versions in
the same system.

We need to create a link cause of needing use our new python on command line simply typing ‘python‘.

ln -s python2.7 python

And I added an alias into my .basrc file to use my new python by typing only
‘python‘ on command line.

alias python='~/bin/python'

tar
===
tar xvfJ filename.tar.xz

***********************************************************************
                                OLD POST
***********************************************************************
Hello list,

    Not a question in itself, but I thought I would contribute with 
something.

    "How to get KLEE up and running in Ubuntu 12.04" (x86, attached 
document)
    (without uClib and make check will fail)

    Or run the following script in the linux shell (should not ask you 
anything) [take about 20 minutes with downloading and compiling on my 
machine]:


cd ~
sudo apt-get -y install g++ curl dejagnu subversion bison flex
mkdir work
cd work
wget http://llvm.org/releases/2.9/llvm-gcc-4.2-2.9-i686-linux.tgz
tar zxfv llvm-gcc-4.2-2.9-i686-linux.tgz
echo "export PATH=\$PATH:~/work/llvm-gcc-4.2-2.9-i686-linux/bin" >> 
~/.bashrc
echo "export PATH=\$PATH:~/work/klee/Release+Asserts/bin" >> ~/.bashrc
echo "export C_INCLUDE_PATH=/usr/include/i386-linux-gnu" >> ~/.bashrc
source ~/.bashrc
curl -O http://llvm.org/releases/2.9/llvm-2.9.tgz
tar zxvf llvm-2.9.tgz
cd llvm-2.9
./configure --enable-optimized --enable-assertions
make -j $(grep -c processor /proc/cpuinfo)
cd ..
svn co -r 940 
https://stp-fast-prover.svn.sourceforge.net/svnroot/stp-fast-prover/trunk/stp 
stp
cd stp
./scripts/configure --with-prefix=/home/$(whoami)/work/stp_install --with-cryptominisat2
make  -j $(grep -c processor /proc/cpuinfo) OPTIMIZE=-O2 CFLAGS_M32= install
cd ..
svn co http://llvm.org/svn/llvm-project/klee/trunk klee
cd klee
./configure --with-llvm=/home/$(whoami)/work/llvm-2.9 --with-stp=/home/$(whoami)/work/stp_install
make -j $(grep -c processor /proc/cpuinfo) ENABLE_OPTIMIZED=1
make unittests

Best Regards,
Andrei Porumb
***********************************************************************
***********************************************************************


Creating IR
=============
c++ -g creatingIR.cpp `llvm-config --cxxflags --ldflags --libs ` -o tut1


git push origin master
git ls-files -d | xargs git checkout --
git pull origin
git --rebase 
http://stackoverflow.com/questions/7438313/pushing-to-git-returning-error-code-403-fatal-http-request-failed

 valgrind --leak-check=yes myprog arg1 arg2

 tar -cf mp2.tar mp2
 gzip -9 mp2.tar


 llvm-gcc.cde --emit-llvm -c -g get_sign.c
 klee.cde get_sign.o
 ktest-tool.cde --write-ints klee-last/test000001.ktest
 grep -E "====|OK \(" LOG | grep -B1 OK | grep -v -- -- | sed -e 's/OK (//' -e
       's/ tests*)//' | grep -B1 '^[0-8]$' | grep -v -- --

 ssh -Y sdasgup3@taub.campuscluster.illinois.edu
 ssh -Y sdasgup3@remlnx.ews.illinois.edu
 ssh -Y sdasgup3@tarekc01.cs.uiuc.edu
 ssh -Y sdasgup3@tarekc41.cs.illinois.edu

 ssh -Y sdasgup3@asha.cs.illinois.edu
 ssh -Y sdasgup3@commando.cs.illinois.edu
 ssh -Y sdasgup3@presto.cs.illinois.edu
 ssh -Y sdasgup3@maute.cs.illinois.edu
 ssh -Y sdasgup3@burman.cs.illinois.edu
 ssh -Y sdasgup3@anand.cs.illinois.edu
 ssh sdasgup3@tarekc41.cs.illinois.edu

 ssh -Y sdasgup3@web.engr.illinois.edu

cscopes
=======
llvm:
cscope lib/*/*.h lib/*/*/*.h lib/*/*/*/*.h lib/*/*.cpp lib/*/*/*.cpp lib/*/*/*/*.cpp include/llvm/*.h include/llvm/*/*.h

../llvm.src/configure CC=/home/kasampa2/Documents/gcc/gcc-4.8.2.inst/bin/gcc CXX=/home/kasampa2/Documents/gcc/gcc-4.8.2.inst/bin/g++ --with-gcc-toolchain=/home/kasampa2/Documents/gcc/gcc-4.8.2.inst --with-extra-ld-options="-Wl,-rpath,/home/kasampa2/Documents/gcc/gcc-4.8.2.inst/lib64" --prefix=/home/kasampa2/Documents/llvm/llvm.inst --enable-jit --enable-targets=all --disable-optimized --enable-assertions

../llvm.src/configure CC=clang CXX=clang++ --with-gcc-toolchain=/home/kasampa2/Documents/gcc/gcc-4.8.2.inst --with-extra-ld-options="-Wl,-rpath,/home/kasampa2/Documents/gcc/gcc-4.8.2.inst/lib64" --prefix=/home/kasampa2/Documents/llvm/llvm.inst --enable-jit --enable-targets=all --disable-optimized --enable-assertions

