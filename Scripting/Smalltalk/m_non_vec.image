n := 160.
image_Width_And_Height := (((n + 7) >>  3) << 3 ).
inverse_w  := 2.0 / image_Width_And_Height.
inverse_h  := 2.0 / image_Width_And_Height.
bytes_per_row := (n + 7) >>  3.
bitmap_size := bytes_per_row*image_Width_And_Height.
bitmap := ByteArray new: bitmap_size.
bitmap from: 1 to: bitmap_size put: 255.

initial_r := Array new:  image_Width_And_Height.
initial_i := Array new:  image_Width_And_Height.

(1 to: image_Width_And_Height) do: 
[ :ii | 
      initial_r at: ii put: inverse_w* (ii - 1 ) - 1.5.
      initial_i at: ii put: inverse_h* (ii - 1) - 1.0.
].

1 to: image_Width_And_Height  do: [ :ii |
	prefetched_Initial_i := initial_i  at: ii. 
   1 to: image_Width_And_Height do: [ :jj | 
 		cr := initial_r at:jj.
		ci := prefetched_Initial_i.
		zr := 0.0.
		zi := 0.0.
		tr := 0.0.
		ti := 0.0.
		
		(1 to: 50) do: [  :kk | 
	   		zi := 2.0 * (zr * zi) + ci.
	  		zr := tr - ti + cr.
	  		tr := zr * zr.
	  		ti := zi *zi.
		
		   ((tr + ti) > 4.0) 
				ifTrue:[
					|posn bit byte| 
					posn := ( ( ((ii-1)*(image_Width_And_Height/8)) + 1) + ((jj-1)/8)) asInteger.
					"bit := ((jj - 1) % 8) + 1."
					bit := 8 - ((jj - 1) % 8).
					byte := bitmap basicAt:posn asInteger.
					byte := (byte bitAt:bit  put: 0).
					bitmap basicAt:posn  put: byte.  
				] 
				ifFalse: [].
		].		
	 ].
].
