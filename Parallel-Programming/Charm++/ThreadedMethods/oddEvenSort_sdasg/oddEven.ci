mainmodule oddEven {
  readonly int numelements;
  readonly CProxy_Main mainproxy;
  readonly CProxy_Worker workerarray;
  message myMsg;

  mainchare Main {
    entry Main(CkArgMsg*);
    entry void done(CkReductionMsg* );

  };

  array [1D] Worker {
    entry Worker();
    entry [sync] myMsg* sendSmaller(int);

    entry [threaded] void run() {
      serial {
      for (int i = 0 ; i < numelements; i++) {
        
        if(thisIndex % 2 == 0 && thisIndex != numelements -1 ) {
          myMsg* m = workerarray[thisIndex + 1].sendSmaller(val);
          val = m->val;
          delete m;
        } 
        barrier();
        if (thisIndex % 2 == 1 && thisIndex != numelements -1 ) {
          myMsg* m  = workerarray[thisIndex + 1].sendSmaller(val);
          val = m->val;
          delete m;
        }
        barrier();
      }

      contribute(CkCallback(CkIndex_Main::done(NULL), mainproxy)); 

      }
    };
    entry void dump();
    entry [reductiontarget] void barrierH();
  };

};
