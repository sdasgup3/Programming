===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of alloca's promoted with a single store
1 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of alloca's promoted with a single store
1 scalarrepl - Number of scalar allocas promoted to register

Diffing(xT_10_1) 
	Log Pass
 	Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of alloca's promoted with a single store
1 mem2reg    - Number of alloca's promoted within one block
1 scalarrepl - Number of aggregates converted to scalar
1 scalarrepl - Number of allocas broken up
2 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of alloca's promoted with a single store
1 scalarrepl - Number of aggregate allocas broken up
1 scalarrepl - Number of scalar allocas promoted to register

Diffing(xT_10_2) 
4a5,6
> %struct.stud_Res = type { [10 x i32] }
> 
<   %0 = trunc i320 undef to i32
<   %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @.str, i32 0, i32 0), i32 %0)
>   %0 = alloca [10 x i32]
>   %result = alloca %struct.stud_Res, align 4
>   %arrayidx = getelementptr inbounds [10 x i32]* %0, i32 0, i64 0
>   %1 = load i32* %arrayidx, align 4
>   %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @.str, i32 0, i32 0), i32 %1)
	G Log Pass
 	G Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of alloca's promoted with a single store
1 mem2reg    - Number of dead alloca's removed
2 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of alloca's promoted with a single store
1 scalarrepl - Number of scalar allocas promoted to register

Diffing(xT_10_3) 
4a5,6
> %struct.stud_Res = type { [10 x i32] }
> 
7a10
>   %result = alloca %struct.stud_Res, align 4
	G Log Pass
 	G Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of alloca's promoted with a single store
4 mem2reg    - Number of alloca's promoted within one block
2 scalarrepl - Number of allocas broken up
5 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of alloca's promoted with a single store
4 mem2reg    - Number of alloca's promoted within one block
2 scalarrepl - Number of aggregate allocas broken up
5 scalarrepl - Number of scalar allocas promoted to register

Diffing(xT_10) 
4a5,7
> %struct.stud_Marks = type { i32, i32 }
> %struct.stud_Res = type { i32, i32, %struct.stud_Marks }
> 
12a16,17
>   %0 = alloca %struct.stud_Marks
>   %result = alloca %struct.stud_Res, align 4
	G Log Pass
 	Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of alloca's promoted with a single store
1 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of alloca's promoted with a single store
1 scalarrepl - Number of aggregate allocas broken up
1 scalarrepl - Number of scalar allocas promoted to register

Diffing(xT_12_1) 
5d4
< %struct.stud_Res = type { [10 x i32], %struct.stud_Marks }
6a6
> %struct.stud_Res = type { [10 x i32], %struct.stud_Marks }
12a13,14
>   %0 = alloca %struct.stud_Marks
>   %1 = alloca [10 x i32]
14,17c16,18
<   %std = getelementptr inbounds %struct.stud_Res* %result, i32 0, i32 0
<   %arrayidx = getelementptr inbounds [10 x i32]* %std, i32 0, i64 0
<   %0 = load i32* %arrayidx, align 4
<   %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @.str, i32 0, i32 0), i32 %0)
>   %arrayidx = getelementptr inbounds [10 x i32]* %1, i32 0, i64 0
>   %2 = load i32* %arrayidx, align 4
>   %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @.str, i32 0, i32 0), i32 %2)
	G Log Pass
 	G Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of alloca's promoted with a single store
1 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of alloca's promoted with a single store
2 scalarrepl - Number of aggregate allocas broken up
1 scalarrepl - Number of scalar allocas promoted to register

Diffing(xT_12) 
5d4
< %struct.stud_Res = type { [10 x i32], %struct.stud_Marks }
6a6
> %struct.stud_Res = type { [10 x i32], %struct.stud_Marks }
12a13,15
>   %0 = alloca [30 x i32]
>   %1 = alloca %struct.stud_Marks
>   %2 = alloca [10 x i32]
14,18c17,19
<   %marks = getelementptr inbounds %struct.stud_Res* %result, i32 0, i32 1
<   %subj_nm = getelementptr inbounds %struct.stud_Marks* %marks, i32 0, i32 0
<   %arrayidx = getelementptr inbounds [30 x i32]* %subj_nm, i32 0, i64 0
<   %0 = load i32* %arrayidx, align 4
<   %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([19 x i8]* @.str, i32 0, i32 0), i32 %0)
>   %arrayidx = getelementptr inbounds [30 x i32]* %0, i32 0, i64 0
>   %3 = load i32* %arrayidx, align 4
>   %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([19 x i8]* @.str, i32 0, i32 0), i32 %3)
	G Log Pass
 	G Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of PHI nodes inserted
2 mem2reg    - Number of alloca's promoted with a single store
1 scalarrepl - Number of allocas broken up
3 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of PHI nodes inserted
2 mem2reg    - Number of alloca's promoted with a single store
1 scalarrepl - Number of aggregate allocas broken up
3 scalarrepl - Number of scalar allocas promoted to register

Diffing(xT_1) 
4a5,6
> %struct.fruit = type { i32, i32 }
> 
11a14
>   %snack = alloca %struct.fruit, align 4
	G Log Pass
 	Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

3 mem2reg    - Number of alloca's promoted with a single store
1 scalarrepl - Number of allocas broken up
3 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

3 mem2reg    - Number of alloca's promoted with a single store
1 scalarrepl - Number of aggregate allocas broken up
3 scalarrepl - Number of scalar allocas promoted to register

Diffing(xT_2_1) 
12a13
>   %ptr = alloca %struct.test_struct, align 8
	G Log Pass
 	Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

11 mem2reg    - Number of PHI nodes inserted
 9 mem2reg    - Number of alloca's promoted with a single store
21 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

11 mem2reg    - Number of PHI nodes inserted
 9 mem2reg    - Number of alloca's promoted with a single store
21 scalarrepl - Number of scalar allocas promoted to register

Diffing(xT_2_2) 
	Log Pass
 	Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of PHI nodes inserted
2 mem2reg    - Number of alloca's promoted with a single store
3 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of PHI nodes inserted
2 mem2reg    - Number of alloca's promoted with a single store
3 scalarrepl - Number of scalar allocas promoted to register

Diffing(xT_2) 
	Log Pass
 	Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

3 mem2reg    - Number of PHI nodes inserted
1 mem2reg    - Number of alloca's promoted with a single store
1 scalarrepl - Number of allocas broken up
4 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

3 mem2reg    - Number of PHI nodes inserted
1 mem2reg    - Number of alloca's promoted with a single store
1 scalarrepl - Number of aggregate allocas broken up
4 scalarrepl - Number of scalar allocas promoted to register

Diffing(xT_3) 
4a5,6
> %struct.fruit = type { i32, i32 }
> 
9a12
>   %f = alloca %struct.fruit, align 4
13,14c16,17
<   %f.1.0 = phi i32 [ undef, %entry ], [ %add2, %for.inc ]
<   %f.0.0 = phi i32 [ undef, %entry ], [ %add, %for.inc ]
>   %.01 = phi i32 [ undef, %entry ], [ %add, %for.inc ]
>   %.0 = phi i32 [ undef, %entry ], [ %add2, %for.inc ]
21c24
<   %add = add nsw i32 %f.0.0, %mul
>   %add = add nsw i32 %.01, %mul
23c26
<   %add2 = add nsw i32 %f.1.0, %mul1
>   %add2 = add nsw i32 %.0, %mul1
31c34
<   %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([6 x i8]* @.str, i32 0, i32 0), i32 %f.0.0, i32 %f.1.0)
>   %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([6 x i8]* @.str, i32 0, i32 0), i32 %.01, i32 %.0)
	G Log Pass
 	Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

2 mem2reg    - Number of PHI nodes inserted
1 mem2reg    - Number of alloca's promoted with a single store
3 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

2 mem2reg    - Number of PHI nodes inserted
1 mem2reg    - Number of alloca's promoted with a single store
3 scalarrepl - Number of scalar allocas promoted to register

Diffing(xT_4) 
	Log Pass
 	Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of PHI nodes inserted
2 mem2reg    - Number of alloca's promoted with a single store
1 mem2reg    - Number of alloca's promoted within one block
1 scalarrepl - Number of allocas broken up
4 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of PHI nodes inserted
2 mem2reg    - Number of alloca's promoted with a single store
1 mem2reg    - Number of alloca's promoted within one block
1 scalarrepl - Number of aggregate allocas broken up
4 scalarrepl - Number of scalar allocas promoted to register

Diffing(xT_5) 
4a5,6
> %struct.fruit = type { i32, i32 }
> 
7a10
>   %f = alloca %struct.fruit, align 4
	G Log Pass
 	Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of alloca's promoted with a single store
2 mem2reg    - Number of alloca's promoted within one block
1 scalarrepl - Number of allocas broken up
3 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of alloca's promoted with a single store
2 mem2reg    - Number of alloca's promoted within one block
1 scalarrepl - Number of aggregate allocas broken up
3 scalarrepl - Number of scalar allocas promoted to register

Diffing(xT_6) 
4a5,6
> %struct.fruit = type { i32, i32 }
> 
9a12
>   %st = alloca %struct.fruit, align 4
	G Log Pass
 	Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of PHI nodes inserted
1 mem2reg    - Number of alloca's promoted with a single store
4 mem2reg    - Number of alloca's promoted within one block
2 scalarrepl - Number of allocas broken up
6 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of PHI nodes inserted
1 mem2reg    - Number of alloca's promoted with a single store
4 mem2reg    - Number of alloca's promoted within one block
2 scalarrepl - Number of aggregate allocas broken up
6 scalarrepl - Number of scalar allocas promoted to register

Diffing(xT_7) 
4a5,6
> %struct.fruit = type { i32, i32 }
> 
9a12,13
>   %st = alloca %struct.fruit, align 4
>   %st1 = alloca %struct.fruit, align 4
	G Log Pass
 	Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

2 mem2reg    - Number of PHI nodes inserted
1 mem2reg    - Number of alloca's promoted with a single store
1 mem2reg    - Number of alloca's promoted within one block
4 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

2 mem2reg    - Number of PHI nodes inserted
1 mem2reg    - Number of alloca's promoted with a single store
1 mem2reg    - Number of alloca's promoted within one block
4 scalarrepl - Number of scalar allocas promoted to register

Diffing(xT_8_1) 
	Log Pass
 	Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

4 mem2reg    - Number of PHI nodes inserted
1 mem2reg    - Number of alloca's promoted with a single store
4 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

4 mem2reg    - Number of PHI nodes inserted
1 mem2reg    - Number of alloca's promoted with a single store
4 scalarrepl - Number of scalar allocas promoted to register

Diffing(xT_8_2) 
	Log Pass
 	Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of PHI nodes inserted
1 mem2reg    - Number of alloca's promoted with a single store
5 mem2reg    - Number of alloca's promoted within one block
1 mem2reg    - Number of dead alloca's removed
2 scalarrepl - Number of allocas broken up
8 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of PHI nodes inserted
1 mem2reg    - Number of alloca's promoted with a single store
5 mem2reg    - Number of alloca's promoted within one block
2 mem2reg    - Number of dead alloca's removed
2 scalarrepl - Number of aggregate allocas broken up
9 scalarrepl - Number of scalar allocas promoted to register

Diffing(xT_8_3) 
4a5,7
> %struct.date = type { i32, i32, i32 }
> %struct.student = type { i32, %struct.date, [3 x i32], i32 }
> 
9a13,15
>   %0 = alloca [3 x i32]
>   %1 = alloca %struct.date
>   %list = alloca %struct.student, align 4
	G Log Pass
 	G Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of alloca's promoted with a single store
1 mem2reg    - Number of alloca's promoted within one block
2 scalarrepl - Number of allocas broken up
2 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of alloca's promoted with a single store
2 mem2reg    - Number of dead alloca's removed
1 scalarrepl - Number of aggregate allocas broken up
3 scalarrepl - Number of scalar allocas promoted to register

Diffing(xT_8_4) 
4a5,7
> %struct.date = type { i32, i32, i32 }
> %struct.student = type { i32, %struct.date, [3 x i32], i32 }
> 
10c13,18
<   %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 undef)
>   %0 = alloca [3 x i32]
>   %1 = alloca %struct.date
>   %list = alloca %struct.student, align 4
>   %arrayidx = getelementptr inbounds [3 x i32]* %0, i32 0, i64 0
>   %2 = load i32* %arrayidx, align 4
>   %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 %2)
	G Log Pass
 	G Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

4 mem2reg    - Number of PHI nodes inserted
1 mem2reg    - Number of alloca's promoted with a single store
3 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

4 mem2reg    - Number of PHI nodes inserted
1 mem2reg    - Number of alloca's promoted with a single store
3 scalarrepl - Number of scalar allocas promoted to register

Diffing(xT_8) 
	Log Pass
 	Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of alloca's promoted with a single store
1 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of alloca's promoted with a single store
1 scalarrepl - Number of scalar allocas promoted to register

Diffing(xT_9_1) 
	Log Pass
 	Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of alloca's promoted with a single store
3 mem2reg    - Number of alloca's promoted within one block
2 scalarrepl - Number of allocas broken up
4 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of alloca's promoted with a single store
3 mem2reg    - Number of alloca's promoted within one block
2 scalarrepl - Number of aggregate allocas broken up
4 scalarrepl - Number of scalar allocas promoted to register

Diffing(xT_9_2) 
15a16,19
>   %0 = alloca [50 x i8]
>   %1 = alloca %struct.student_college_detail
>   %2 = alloca [20 x i8]
>   %stu_data = alloca %struct.student_detail, align 4
	G Log Pass
 	Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

4 mem2reg    - Number of alloca's promoted with a single store
2 scalarrepl - Number of allocas broken up
4 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of alloca's promoted with a single store
1 scalarrepl - Number of scalar allocas promoted to register

Diffing(xT_9_3) 
17,36c17,25
<   %stu_data.1 = alloca [20 x i8], align 4
<   %stu_data.3.1 = alloca [50 x i8], align 4
<   %main.stu_data = bitcast { i32, [20 x i8], float, { i32, [50 x i8], [2 x i8] } }* @main.stu_data to %struct.student_detail*
<   %main.stu_data.0 = getelementptr inbounds %struct.student_detail* %main.stu_data, i32 0, i32 0
<   %tmp = load i32* %main.stu_data.0, align 4
<   %main.stu_data.1 = getelementptr inbounds %struct.student_detail* %main.stu_data, i32 0, i32 1
<   %0 = bitcast [20 x i8]* %stu_data.1 to i8*
<   %1 = bitcast [20 x i8]* %main.stu_data.1 to i8*
<   call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 20, i32 4, i1 false)
<   %main.stu_data.2 = getelementptr inbounds %struct.student_detail* %main.stu_data, i32 0, i32 2
<   %tmp1 = load float* %main.stu_data.2, align 4
<   %main.stu_data.3 = getelementptr inbounds %struct.student_detail* %main.stu_data, i32 0, i32 3
<   %main.stu_data.3.0 = getelementptr inbounds %struct.student_college_detail* %main.stu_data.3, i32 0, i32 0
<   %tmp2 = load i32* %main.stu_data.3.0, align 4
<   %main.stu_data.3.1 = getelementptr inbounds %struct.student_college_detail* %main.stu_data.3, i32 0, i32 1
<   %2 = bitcast [50 x i8]* %stu_data.3.1 to i8*
<   %3 = bitcast [50 x i8]* %main.stu_data.3.1 to i8*
<   call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* %3, i64 50, i32 4, i1 false)
<   %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str, i32 0, i32 0), i32 %tmp)
<   %conv = fpext float %tmp1 to double
>   %stu_data = alloca %struct.student_detail, align 4
>   %0 = bitcast %struct.student_detail* %stu_data to i8*
>   call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ({ i32, [20 x i8], float, { i32, [50 x i8], [2 x i8] } }* @main.stu_data to i8*), i64 84, i32 4, i1 false)
>   %id = getelementptr inbounds %struct.student_detail* %stu_data, i32 0, i32 0
>   %1 = load i32* %id, align 4
>   %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str, i32 0, i32 0), i32 %1)
>   %percentage = getelementptr inbounds %struct.student_detail* %stu_data, i32 0, i32 2
>   %2 = load float* %percentage, align 4
>   %conv = fpext float %2 to double
38c27,30
<   %call2 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str2, i32 0, i32 0), i32 %tmp2)
>   %clg_data = getelementptr inbounds %struct.student_detail* %stu_data, i32 0, i32 3
>   %college_id = getelementptr inbounds %struct.student_college_detail* %clg_data, i32 0, i32 0
>   %3 = load i32* %college_id, align 4
>   %call2 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str2, i32 0, i32 0), i32 %3)
	G Log Pass
 	G Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of alloca's promoted with a single store
1 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of alloca's promoted with a single store
1 scalarrepl - Number of scalar allocas promoted to register

Diffing(xT_9) 
	Log Pass
 	Out Pass
 