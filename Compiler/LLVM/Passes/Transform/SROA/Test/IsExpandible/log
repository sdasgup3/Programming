===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

4 mem2reg    - Number of alloca's promoted with a single store
2 mem2reg    - Number of alloca's promoted within one block
1 scalarrepl - Number of allocas broken up
6 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

4 mem2reg    - Number of alloca's promoted with a single store
2 mem2reg    - Number of alloca's promoted within one block
1 scalarrepl - Number of aggregate allocas broken up
6 scalarrepl - Number of scalar allocas promoted to register

Diffing(isX_1) 
4a5,6
> %struct.twoInt = type { i32, i32, i32 }
> 
9a12
>   %i2 = alloca %struct.twoInt, align 4
	G Log Pass
 	Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

2 mem2reg    - Number of alloca's promoted with a single store
2 mem2reg    - Number of alloca's promoted within one block
1 scalarrepl - Number of allocas broken up
4 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

2 mem2reg    - Number of alloca's promoted with a single store
2 mem2reg    - Number of alloca's promoted within one block
1 scalarrepl - Number of aggregate allocas broken up
4 scalarrepl - Number of scalar allocas promoted to register

Diffing(isX_2) 
4a5,6
> %struct.twoInt = type { i32, i32 }
> 
9a12
>   %i2 = alloca %struct.twoInt, align 4
	G Log Pass
 	Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of PHI nodes inserted
2 mem2reg    - Number of alloca's promoted with a single store
1 scalarrepl - Number of allocas broken up
3 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of PHI nodes inserted
2 mem2reg    - Number of alloca's promoted with a single store
1 scalarrepl - Number of aggregate allocas broken up
3 scalarrepl - Number of scalar allocas promoted to register

Diffing(isX_3) 
4a5,6
> %struct.fruit = type { i32, i32 }
> 
9a12
>   %snack = alloca %struct.fruit, align 4
	G Log Pass
 	Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

3 mem2reg    - Number of alloca's promoted with a single store
2 mem2reg    - Number of alloca's promoted within one block
2 scalarrepl - Number of allocas broken up
5 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

3 mem2reg    - Number of alloca's promoted with a single store
2 mem2reg    - Number of alloca's promoted within one block
2 scalarrepl - Number of aggregate allocas broken up
5 scalarrepl - Number of scalar allocas promoted to register

Diffing(isX_4) 
4a5,6
> %struct.twoInt = type { i32, i32 }
> 
9a12,13
>   %i2 = alloca %struct.twoInt, align 4
>   %i1 = alloca %struct.twoInt, align 4
	G Log Pass
 	Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

3 mem2reg    - Number of alloca's promoted with a single store
2 mem2reg    - Number of alloca's promoted within one block
4 scalarrepl - Number of allocas broken up
5 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

3 mem2reg    - Number of alloca's promoted with a single store
2 mem2reg    - Number of alloca's promoted within one block
4 scalarrepl - Number of aggregate allocas broken up
5 scalarrepl - Number of scalar allocas promoted to register

Diffing(isX_5) 
4a5,8
> %struct.One = type { i32, i32 }
> %struct.Two = type { %struct.One }
> %struct.Three = type { %struct.One, %struct.Two }
> 
9a14,17
>   %0 = alloca %struct.One
>   %1 = alloca %struct.Two
>   %2 = alloca %struct.One
>   %i = alloca %struct.Three, align 4
	G Log Pass
 	Out Pass
 isX_6.c:14:22: warning: comparison of distinct pointer types ('void *' and 'One *') [-Wcompare-distinct-pointer-types]
  printf("%d ", NULL >  &i);
                ~~~~ ^  ~~
1 warning generated.
===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of alloca's promoted with a single store
1 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of alloca's promoted with a single store
1 scalarrepl - Number of scalar allocas promoted to register

Diffing(isX_6) 
	Log Pass
 	Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of alloca's promoted with a single store
1 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of alloca's promoted with a single store
1 mem2reg    - Number of dead alloca's removed
1 scalarrepl - Number of aggregate allocas broken up
2 scalarrepl - Number of scalar allocas promoted to register

Diffing(isX_7) 
13,14c13
<   %cmp = icmp eq %struct.One* null, %i
<   %conv = zext i1 %cmp to i32
>   %conv = zext i1 false to i32
	G Log Pass
 	G Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of alloca's promoted with a single store
1 mem2reg    - Number of alloca's promoted within one block
1 scalarrepl - Number of allocas broken up
2 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of alloca's promoted with a single store
1 mem2reg    - Number of alloca's promoted within one block
1 mem2reg    - Number of dead alloca's removed
1 scalarrepl - Number of aggregate allocas broken up
3 scalarrepl - Number of scalar allocas promoted to register

Diffing(isX_8) 
4a5,6
> %struct.One = type { i32, i32 }
> 
9a12
>   %i = alloca %struct.One, align 4
	G Log Pass
 	G Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

1 mem2reg    - Number of alloca's promoted with a single store
1 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

2 mem2reg    - Number of alloca's promoted with a single store
2 mem2reg    - Number of alloca's promoted within one block
4 scalarrepl - Number of aggregate allocas broken up
4 scalarrepl - Number of scalar allocas promoted to register

Diffing(isX_9) 
5,6d4
< %struct.Three = type { %struct.Two, %struct.One, i32 }
< %struct.Two = type { %struct.One }
7a6,7
> %struct.Two = type { %struct.One }
> %struct.Three = type { %struct.Two, %struct.One, i32 }
13a14,18
>   %0 = alloca i32
>   %1 = alloca %struct.One
>   %2 = alloca i32
>   %3 = alloca %struct.One
>   %4 = alloca %struct.Two
15,34c20,22
<   %T = getelementptr inbounds %struct.Three* %i, i32 0, i32 0
<   %O = getelementptr inbounds %struct.Two* %T, i32 0, i32 0
<   %r = getelementptr inbounds %struct.One* %O, i32 0, i32 1
<   %0 = load i32* %r, align 4
<   %O1 = getelementptr inbounds %struct.Three* %i, i32 0, i32 1
<   %e = getelementptr inbounds %struct.One* %O1, i32 0, i32 0
<   store i32 %0, i32* %e, align 4
<   %O2 = getelementptr inbounds %struct.Three* %i, i32 0, i32 1
<   %e3 = getelementptr inbounds %struct.One* %O2, i32 0, i32 0
<   %1 = load i32* %e3, align 4
<   %O4 = getelementptr inbounds %struct.Three* %i, i32 0, i32 1
<   %r5 = getelementptr inbounds %struct.One* %O4, i32 0, i32 1
<   %2 = load i32* %r5, align 4
<   %mul = mul nsw i32 %1, %2
<   %T6 = getelementptr inbounds %struct.Three* %i, i32 0, i32 0
<   %O7 = getelementptr inbounds %struct.Two* %T6, i32 0, i32 0
<   %e8 = getelementptr inbounds %struct.One* %O7, i32 0, i32 0
<   store i32 %mul, i32* %e8, align 4
<   %cmp = icmp ne %struct.Three* null, %i
<   %conv = zext i1 %cmp to i32
>   %mul = mul nsw i32 undef, undef
>   store i32 %mul, i32* %0, align 4
>   %conv = zext i1 true to i32
36,37c24
<   %w = getelementptr inbounds %struct.Three* %i, i32 0, i32 2
<   %cmp9 = icmp ne i32* null, %w
>   %cmp9 = icmp ne i32* null, %2
40,43c27
<   %T12 = getelementptr inbounds %struct.Three* %i, i32 0, i32 0
<   %O13 = getelementptr inbounds %struct.Two* %T12, i32 0, i32 0
<   %e14 = getelementptr inbounds %struct.One* %O13, i32 0, i32 0
<   %cmp15 = icmp ne i32* null, %e14
>   %cmp15 = icmp ne i32* null, %0
	G Log Pass
 	G Out Pass
 ===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

2 mem2reg    - Number of alloca's promoted with a single store
2 scalarrepl - Number of allocas promoted

===-------------------------------------------------------------------------===
                          ... Statistics Collected ...
===-------------------------------------------------------------------------===

2 mem2reg    - Number of alloca's promoted with a single store
2 scalarrepl - Number of aggregate allocas broken up
2 scalarrepl - Number of scalar allocas promoted to register

Diffing(isX_10) 
5d4
< %struct.One = type { i32, %struct.Zero }
6a6
> %struct.One = type { i32, %struct.Zero }
12a13,15
>   %0 = alloca i32
>   %1 = alloca %struct.Zero
>   %2 = alloca i32
14,19c17,19
<   %i1 = getelementptr inbounds %struct.One* %i, i32 0, i32 0
<   %0 = load i32* %i1, align 4
<   %z = getelementptr inbounds %struct.One* %i, i32 0, i32 1
<   %f = getelementptr inbounds %struct.Zero* %z, i32 0, i32 0
<   %1 = load i32* %f, align 4
<   %mul = mul nsw i32 %0, %1
>   %3 = load i32* %2, align 4
>   %4 = load i32* %0, align 4
>   %mul = mul nsw i32 %3, %4
21,23c21
<   %z2 = getelementptr inbounds %struct.One* %i, i32 0, i32 1
<   %f3 = getelementptr inbounds %struct.Zero* %z2, i32 0, i32 0
<   %cmp = icmp eq i32* null, %f3
>   %cmp = icmp eq i32* null, %0
26,27c24
<   %i5 = getelementptr inbounds %struct.One* %i, i32 0, i32 0
<   %cmp6 = icmp eq i32* null, %i5
>   %cmp6 = icmp eq i32* null, %2
	G Log Pass
 	G Out Pass
 