        - function  m_non_vec(N::Int64)
    30224     LIMIT_SQUARED = 4.0;
        0     MAX_ITER = 50;
        0     image_Width_And_Height = Int64(((N + 7) >>  3) << 3 );
        0     inverse_w  = 2.0 / image_Width_And_Height;
        0     inverse_h  = 2.0 / image_Width_And_Height;
        0     bytes_per_row = (N + 7) >>  3;
        - 
   320192     bitmap = ones(UInt8, bytes_per_row, image_Width_And_Height);
        0     fill!(bitmap,255);
        - 
    12880     initial_r = Array(Float64, image_Width_And_Height,  1);
    12880     initial_i = Array(Float64, image_Width_And_Height,  1);
        - 
        0     for ii in 1: image_Width_And_Height
        0       initial_r[ii]= inverse_w* (ii - 1 ) - 1.5;
        0       initial_i[ii]= inverse_h* (ii - 1) - 1.0;
        -     end
        - 
        0     for ii in 1: image_Width_And_Height
        0       prefetched_Initial_i=initial_i[ii];
        - 
        0       current_Pixel_Bitmask = UInt8(128);
        0       for jj in 1: image_Width_And_Height
        - 
        0         if jj%8 == 1
        0           current_Pixel_Bitmask = UInt8(128);
        - 	end  
        0         cr  = initial_r[jj];
        0 	ci = prefetched_Initial_i;
        0 	zr = 0.0;
        0 	zi = 0.0;
        0 	tr = 0.0;
        0 	ti = 0.0;
        - 
        0 	for iter = 1 : MAX_ITER
        0 	  zi = 2.0 * (zr * zi) + ci;
        0 	  zr = tr - ti + cr;
        0 	  tr = zr * zr;
        0 	  ti = zi *zi;
        0 	  if (tr + ti)  > LIMIT_SQUARED
        0 	    posn = Int64((jj -1)  >> 3);
        0 	    bitmap[posn + 1,ii] = bitmap[posn + 1,ii] & ~ current_Pixel_Bitmask ;
        0             break;
        - 	  end  
        - 	end
        0 	current_Pixel_Bitmask = current_Pixel_Bitmask >> 1;
        - 
        -       end	
        -     end    
        - #println(bitmap);
        - 
      560     fid = open("non_vec.pbm","w");
      224     print(fid, "P4\n", N, " " ,N, "\n");
        0     write(fid, bitmap);
        0     close(fid);
        -  end
        - 
